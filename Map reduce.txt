Code :-

Inserting the data necessary 
db.Stud.insertMany([
{ Rollno: 1, Name: 'Ram', Marks: 80, Branch: 'Computer' },
{ Rollno: 2, Name: 'Ravi', Marks: 90, Branch: 'Computer' },
{ Rollno: 3, Name: 'Rahul', Marks: 70, Branch: 'IT' },
{ Rollno: 4, Name: 'Sachin', Marks: 60, Branch: 'IT' }
])

Code for Calculating Total Marks

`db.Stud.mapReduce(
   function() {
      emit(this.Branch, this.Marks);  // Map: Emit Branch as key and Marks as value
   },
   function(key, values) {
      return Array.sum(values);  // Reduce: Sum all Marks for the given Branch
   },
   {
      query: { "Marks": { $gt: 60 } },  // Only include documents where Marks > 60
      out: "Total_Marks"  // Output collection name
   }
)`

`db.Total_Marks.find().pretty();`

Code for Calculating Average Marks

`db.Stud.mapReduce(
   function() {
      emit(this.Branch, this.Marks);  // Map: Emit Branch as key and Marks as value
   },
   function(key, values) {
      return Array.avg(values);  // Reduce: Average all Marks for the given Branch
   },
   {
      query: { "Marks": { $gt: 60 } },  // Only include documents where Marks > 60
      out: "Avg_Marks"  // Output collection name
   }
)` 

`db.Avg_Marks.find().prett y();`





------------------------------------------------------------------------------------------------------------------------------------------------------------
### Concept :-

MapReduce is a programming model used for processing large amounts of data by breaking it into smaller, manageable chunks. It works in two main steps: **Map** and **Reduce**.

### How It Works: Simple Explanation

1. **Map Step**: Think of this step as "sorting" or "grouping." Each piece of data (like a row in a table) is processed individually. In this step, you:
    - Go through each piece of data.
    - Extract the key (the category you want to group by) and its associated value (like a score, amount, or count).
    - "Emit" or send out each key-value pair.
    
    For example, if you have data about student scores and you want to group by "Branch," the **Map step** would output pairs like:
    
    - `("Computer", 80)`
    - `("Computer", 90)`
    - `("IT", 70)`
    - `("IT", 60)`
2. **Reduce Step**: This step combines all values associated with each key. For each unique key, you:
    - Take all values emitted by the Map step.
    - Perform an operation on them, like summing, averaging, or finding the maximum.
    
    In the previous example, the **Reduce step** could sum the values:
    
    - `"Computer": 170` (80 + 90)
    - `"IT": 130` (70 + 60)

### Important Notes:-

```
emit(this.Branch, this.Marks);
```

A.

- `emit` is a command that outputs key-value pairs.
- `this.Branch` refers to the `Branch` field in each document (e.g., "Computer" or "IT"), which becomes the **key**.
- `this.Marks` refers to the `Marks` field in each document, which becomes the **value**.
- So, each document will output a pair like `("Computer", 80)` or `("IT", 70)`.

B.   The `query` option specifies a filter to limit which documents from the collection are included in  the MapReduce operation

C.  The `out` option specifies where to store the results of the MapReduce operation. It defines the name of the collection where the output will be saved. The results of the MapReduce  are stored in a collection called `Total_Marks` or `Avg_Marks`