1. What is PL/SQL, and why do we use it?
    - Answer: PL/SQL stands for Procedural Language for SQL. It extends SQL with procedural features like variables, loops, and conditions, allowing developers to write complex business logic in the database. It’s used to manage and manipulate data, create functions and procedures, automate tasks, and handle errors within Oracle databases.
2. Explain the difference between PL/SQL procedures and functions.
    - Answer: The main difference is that a function must return a single value using the RETURN keyword, while a procedure does not return a value but can modify data using OUT parameters or perform actions without returning a value. Functions are usually used for computations, and procedures are used for performing tasks or operations.
3. What is a PL/SQL block, and what are its sections?
    - Answer: A PL/SQL block is the basic unit of PL/SQL programming. It consists of three main sections:
    •	Declaration Section: Where variables, constants, and exceptions are declared.
    •	Execution Section: Where the main code and logic are written.
    •	Exception Handling Section: Where exceptions or errors are managed.
    •	Only the execution section is mandatory; the others are optional.
4. How do you handle exceptions in PL/SQL?
    - Answer: Exceptions in PL/SQL are handled in the EXCEPTION section of a PL/SQL block. Common exceptions like NO_DATA_FOUND, TOO_MANY_ROWS, and user-defined exceptions can be caught here using WHEN clauses. The OTHERS exception is used to catch any unexpected errors.
5. What is the difference between implicit and explicit cursors?
    - Answer:
    •	Implicit Cursors: These are automatically created by Oracle for single SQL statements (like SELECT INTO). They’re managed internally by Oracle.
    •	Explicit Cursors: These are defined by the programmer and used for multi-row queries where the result set needs to be processed row by row. They allow more control over fetching and handling data.
6. Explain the usage of %TYPE and %ROWTYPE.
    - Answer:
    •	%TYPE is used to declare a variable with the same data type as a column or another variable, ensuring consistency in data types.
    •	%ROWTYPE is used to declare a record variable that can hold an entire row of data from a table or a cursor.
7. What are triggers in PL/SQL, and when would you use them?
    - Answer: Triggers are stored procedures that automatically execute when specific events occur on a table or view (like INSERT, UPDATE, DELETE). They’re used for tasks like enforcing business rules, auditing, logging changes, and maintaining complex integrity constraints.
8. How can you improve the performance of a PL/SQL program?
    - Answer: To improve performance, you can:
    •	Use bulk processing (BULK COLLECT and FORALL) for large data operations.
    •	Avoid excessive context switching between SQL and PL/SQL.
    •	Use collections instead of repeatedly querying data.
    •	Avoid committing in loops, as it can slow down the execution.
    •	Use the NOCOPY hint with OUT parameters to pass them by reference.
9. What are packages in PL/SQL, and what are the benefits of using them?
    - Answer: A package is a collection of related procedures, functions, variables, and other PL/SQL constructs grouped together. Packages improve modularity, code reusability, and encapsulation. They also allow you to define public and private components, making maintenance easier and improving performance by loading only once in a session.
10. Describe the difference between a procedure with OUT parameters and a function.
    - Answer: A procedure with OUT parameters can return multiple values, as the OUT parameters act like variables that hold returned data. In contrast, a function returns only a single value directly through the RETURN statement and is typically used in SQL expressions, while procedures are used for performing operations.
11. What are collections in PL/SQL, and what types are available?
    - Answer: Collections are data structures that hold multiple values in PL/SQL, similar to arrays in other programming languages. Types include:
    •	Associative Arrays (also known as index-by tables): Indexed by numbers or strings.
    •	Nested Tables: Unbounded and can store a dynamic number of elements.
    •	VARRAYs (Variable-size arrays): Have a fixed maximum size, useful for bounded lists.
12. What is a ref cursor, and when would you use it?
    - Answer: A ref cursor is a cursor variable that points to the result set of a query. It is often used in dynamic SQL or to return result sets from stored procedures to calling applications, making it possible to handle flexible queries where the structure may vary.
13. How do you handle transaction control in PL/SQL?
    - Answer: Transaction control in PL/SQL is handled using COMMIT, ROLLBACK, and SAVEPOINT statements.
    •	COMMIT saves all changes made in the transaction.
    •	ROLLBACK undoes changes made in the transaction.
    •	SAVEPOINT allows partial rollbacks to a specific point within the transaction.
14. Explain what dynamic SQL is in PL/SQL and why you might use it.
    - Answer: Dynamic SQL allows you to build and execute SQL statements dynamically at runtime using the EXECUTE IMMEDIATE command or DBMS_SQL package. It is useful when you need to execute SQL statements that aren’t known until runtime or involve DDL statements, which are not supported in static PL/SQL.
15. What are autonomous transactions, and how do they work in PL/SQL?
    - Answer: An autonomous transaction is a separate transaction within a PL/SQL block that can commit or roll back independently of the main transaction. They are useful for logging, auditing, and performing actions like sending emails without affecting the main transaction.
16. How do you debug PL/SQL code?
    - Answer: PL/SQL debugging can be done using various tools and techniques:
    •	Use DBMS_OUTPUT.PUT_LINE to print values and track program flow.
    •	Use EXCEPTION blocks to capture and log errors.
    •	Utilize Oracle SQL Developer or TOAD for step-by-step debugging and setting breakpoints.
    •	Use the DBMS_DEBUG package for advanced debugging.
17. Explain the purpose of the FORALL and BULK COLLECT statements in PL/SQL.
    - Answer: FORALL and BULK COLLECT are used to improve performance by handling large data sets in bulk operations.
    •	BULK COLLECT retrieves multiple rows into a collection with a single fetch, reducing context switching.
    •	FORALL executes a DML operation for each element in a collection, also reducing context switching and improving performance.
18. What are user-defined exceptions, and how do you create them in PL/SQL?
    - Answer: User-defined exceptions are custom exceptions defined by the developer to handle specific errors. They are created using the EXCEPTION keyword and raised with RAISE. For example:

DECLARE
e_invalid_input EXCEPTION;
BEGIN
IF some_condition THEN
RAISE e_invalid_input;
END IF;
EXCEPTION
WHEN e_invalid_input THEN
DBMS_OUTPUT.PUT_LINE('Invalid input detected');
END;

1. How do you use cursors to fetch data in PL/SQL?
    - Answer: Cursors allow row-by-row processing of query results.
    •	Explicit Cursors are defined with the CURSOR keyword, opened, fetched into variables, and closed after processing.
    •	Implicit Cursors are automatically created for single-row queries like SELECT INTO.
2. What is the difference between a stored procedure and an anonymous block in PL/SQL?
    - Answer: A stored procedure is a named PL/SQL block stored in the database that can be executed multiple times. An anonymous block is an unnamed PL/SQL block executed once and is not stored in the database. Procedures are reusable, while anonymous blocks are temporary. MongoDB.
3. What is MongoDB, and why is it called a NoSQL database?
    - Answer: MongoDB is a NoSQL, document-oriented database that stores data in JSON-like BSON (Binary JSON) format. It is called a NoSQL database because it does not use the traditional relational database model, and it doesn’t require predefined schemas, tables, or SQL queries.
4. Explain the structure of a document in MongoDB.
    - Answer: A document in MongoDB is a BSON (Binary JSON) object, structured as key-value pairs. Each document can have different fields, which makes MongoDB schema-flexible. Documents in a collection are analogous to rows in relational databases but can vary in structure.
5. What is a collection in MongoDB?
    - Answer: A collection in MongoDB is a group of documents, similar to a table in relational databases. Collections do not enforce a fixed schema, allowing each document to have a different structure within the same collection.
6. How do you insert data into MongoDB?
    - Answer: Data is inserted into MongoDB using the insertOne() method for a single document or insertMany() for multiple documents. For example:

db.collectionName.insertOne({ name: "John", age: 30 });
db.collectionName.insertMany([{ name: "Alice" }, { name: "Bob" }]);

1. How do you update a document in MongoDB?
    - Answer: MongoDB uses updateOne(), updateMany(), and replaceOne() methods for updating documents. updateOne() and updateMany() allow partial updates, while replaceOne() replaces the entire document. Example:

db.collectionName.updateOne({ name: "John" }, { $set: { age: 31 } });

1. Explain the difference between find() and findOne().
    - Answer: The find() method retrieves all documents that match a query and returns a cursor, which can be iterated over to access documents. findOne() retrieves only the first document that matches the query.
2. What are MongoDB indexes, and why are they important?
    - Answer: Indexes in MongoDB are data structures that improve the efficiency of search queries. They allow faster retrieval of documents by reducing the amount of data MongoDB needs to scan. Indexes are essential for optimizing read operations.
3. How do you create an index in MongoDB?
    - Answer: Use the createIndex() method to create an index. For example, to create an index on the name field:

db.collectionName.createIndex({ name: 1 }); // 1 for ascending order

1. What is aggregation in MongoDB, and how is it used?
    - Answer: Aggregation is a powerful framework in MongoDB that allows data transformation and analysis by processing data in stages. It’s used to perform operations like filtering, grouping, and calculating summaries. The aggregation pipeline is the most common method.
2. How does the aggregation pipeline work?
    - Answer: The aggregation pipeline processes documents through multiple stages, each performing a specific operation on the data. For example, $match filters documents, $group groups them, and $sort sorts them. Example:

db.collectionName.aggregate([
{ $match: { status: "active" } },
{ $group: { _id: "$category", total: { $sum: "$amount" } } }
]);

1. Explain the use of $lookup in aggregation.
    - Answer: $lookup is used for joining data from two collections, similar to a SQL join. It enables referencing documents from another collection and adding them to the current document, commonly used in aggregation pipelines.
2. What is sharding in MongoDB, and why is it used?
    - Answer: Sharding is a method of distributing data across multiple servers to handle large datasets and high-throughput operations. It’s used to achieve horizontal scaling, ensuring that MongoDB can manage large data volumes efficiently.
3. How does replication work in MongoDB?
    - Answer: Replication in MongoDB is achieved by setting up a replica set, which consists of a primary node and multiple secondary nodes. The primary node receives all writes, while secondary nodes replicate the data, ensuring high availability and redundancy.
4. What are the advantages of using a replica set in MongoDB?
    - Answer: Replica sets provide data redundancy, high availability, and fault tolerance. In case the primary node fails, a secondary node can be promoted to primary, ensuring continuous operation.
5. What is a capped collection in MongoDB?
    - Answer: A capped collection is a fixed-size, circular collection that maintains the order of insertion and deletes the oldest documents when the size limit is reached. It’s useful for storing logs or time-series data.
6. Explain the difference between deleteOne() and deleteMany().
    - Answer: deleteOne() deletes the first document that matches the query, while deleteMany() deletes all documents that match the query criteria. Example:

db.collectionName.deleteOne({ name: "John" });
db.collectionName.deleteMany({ age: { $lt: 18 } });

1. What are the pros and cons of using MongoDB over a traditional relational database?
    - Answer:
    •	Pros:
    •	Flexible schema.
    •	High scalability and performance for large datasets.
    •	Better suited for handling unstructured or semi-structured data.
    •	Cons:
    •	Limited support for multi-document transactions (improving in recent versions).
    •	Not ideal for applications with complex relationships and joins.
    •	Less support for ACID transactions (though it’s improved recently).
2. What are MongoDB transactions, and how do they work?
    - Answer: Transactions in MongoDB ensure atomicity across multiple documents within a single collection or across collections, allowing operations to be grouped. Transactions are mainly used in replica sets and sharded clusters in MongoDB 4.0+.
3. How does MongoDB handle schema design, and what are best practices?
    - Answer: MongoDB does not enforce a strict schema, but designing a schema is crucial for performance and data integrity. Best practices include embedding documents for related data, avoiding excessive nesting, and using references only when data consistency is critical.
4. How do you perform text search in MongoDB?
    - Answer: MongoDB supports text search by creating a text index on the fields to be searched. For example:

db.collectionName.createIndex({ description: "text" });
db.collectionName.find({ $text: { $search: "keyword" } });

```
•	The $text operator can then be used to perform text searches on indexed fields.

```

1. What is the purpose of $set and $unset in MongoDB updates?
    - Answer: $set is used to update or add a field in a document, while $unset removes a field from a document. Example:

db.collectionName.updateOne({ name: "Alice" }, { $set: { age: 30 }, $unset: { address: "" } });

1. How do you handle large datasets in MongoDB?
    - Answer: MongoDB handles large datasets through sharding and indexing. Sharding distributes the data across multiple servers, and indexing optimizes queries. Capped collections can also help in managing data growth by automatically deleting older entries.
2. What is GridFS, and when would you use it?
    - Answer: GridFS is MongoDB’s file storage system, used to store and retrieve large files (over 16 MB) that exceed BSON document limits. It splits files into chunks and stores them as separate documents, making it ideal for managing large media files.
3. Explain how MongoDB’s $inc operator works.
    - Answer: The $inc operator is used to increment (or decrement) a numeric field’s value by a specified amount. Example:

db.collectionName.updateOne({ name: "John" }, { $inc: { age: 1 } });

1. How can you back up and restore data in MongoDB?
    - Answer: Data can be backed up using mongodump, which creates binary dumps of the database, and restored using mongorestore. Additionally, MongoDB Atlas provides automated backup and restore options. 1. What is an ER Diagram, and why is it used?
    - Answer: An ER Diagram (Entity-Relationship Diagram) is a visual representation of the entities, relationships, and attributes within a database. It helps in designing a database by providing a clear view of how data elements relate to each other. ER diagrams are used to model the structure of the database before physical implementation.
2. What are the main components of an ER Diagram?
    - Answer: The main components of an ER Diagram are:
    •	Entity: Represented by rectangles, it is an object or concept about which data is stored (e.g., Employee, Department).
    •	Attribute: Represented by ovals, it describes properties of an entity (e.g., Employee ID, Name).
    •	Relationship: Represented by diamonds, it shows how two entities are related (e.g., Works In relationship between Employee and Department).
3. What is an entity, and can you give an example?
    - Answer: An entity is an object or thing in the real world that can have data stored about it. In a database, entities represent tables. For example, in a university database, Student, Course, and Instructor are entities.
4. What is a primary key, and how is it represented in an ER Diagram?
    - Answer: A primary key is a unique identifier for each record in an entity. In ER Diagrams, the primary key attribute is usually underlined. For example, in an Employee entity, Employee ID might be the primary key.
5. What is a relationship, and how is it represented in an ER Diagram?
    - Answer: A relationship shows the association between two entities. It is represented by a diamond shape connecting the related entities. For instance, an Enrolled relationship might connect the Student and Course entities.
6. What is the difference between a strong entity and a weak entity?
    - Answer:
    •	Strong Entity: An entity that can exist independently and has its own primary key.
    •	Weak Entity: An entity that cannot exist without being related to a strong entity and does not have a primary key of its own. It depends on a foreign key relationship with a strong entity and is often represented by a double rectangle.
7. What is cardinality, and what are the different types?
    - Answer: Cardinality defines the numerical relationship between entities in a relationship. The types are:
    •	One-to-One (1:1): One entity instance is associated with one instance of another entity.
    •	One-to-Many (1:N): One entity instance is associated with multiple instances of another entity.
    •	Many-to-Many (M:N): Multiple instances of one entity are associated with multiple instances of another entity.
8. What is the purpose of a foreign key, and how is it represented in an ER Diagram?
    - Answer: A foreign key is an attribute that creates a link between two tables by referencing the primary key of another table. It enforces referential integrity between entities. In ER diagrams, foreign keys are typically shown with dashed lines or annotated relationships.
9. What are attributes, and how are they classified in an ER Diagram?
    - Answer: Attributes are properties or characteristics of an entity. They are classified as:
    •	Simple Attributes: Cannot be divided further (e.g., Age).
    •	Composite Attributes: Can be divided into subparts (e.g., Full Name divided into First Name and Last Name).
    •	Derived Attributes: Attributes calculated from other attributes (e.g., Age derived from Date of Birth).
    •	Multivalued Attributes: Attributes that can have multiple values (e.g., Phone Numbers).
10. What is a composite attribute, and can you provide an example?
    - Answer: A composite attribute is an attribute that can be divided into smaller sub-attributes. For example, an address attribute could be divided into Street, City, State, and ZIP Code.
11. Explain the difference between single-valued and multi-valued attributes.
    - Answer:
    •	Single-Valued Attribute: Holds only one value for each entity instance (e.g., Date of Birth).
    •	Multi-Valued Attribute: Can hold multiple values for each entity instance (e.g., Phone Numbers).
12. What is a derived attribute, and how is it represented?
    - Answer: A derived attribute is one that is calculated from other attributes in the database rather than stored directly. For example, Age can be derived from Date of Birth. In ER diagrams, derived attributes are usually represented with a dashed oval.
13. What is an associative (or junction) entity, and why is it used?
    - Answer: An associative or junction entity is used to handle many-to-many relationships between two entities. It breaks down the many-to-many relationship into two one-to-many relationships by creating a new entity (e.g., Enrollment between Student and Course).
14. How would you represent a one-to-many relationship in an ER Diagram?
    - Answer: In a one-to-many relationship, a single instance of one entity is associated with multiple instances of another entity. This can be represented by connecting the two entities with a line and labeling the cardinality (e.g., a single Department to multiple Employees).
15. What is the difference between total and partial participation?
    - Answer:
    •	Total Participation: All instances of an entity must be associated with an instance of another entity. It is often represented with a double line.
    •	Partial Participation: Only some instances of an entity are associated with instances of another entity. It is shown with a single line.
16. What is normalization, and why is it important when designing an ER Diagram?
    - Answer: Normalization is the process of organizing data to reduce redundancy and improve data integrity. In ER diagrams, normalization helps ensure that entities and relationships are well-defined, reducing the chance of anomalies and improving database efficiency.
17. How do you represent a many-to-many relationship in an ER Diagram?
    - Answer: Many-to-many relationships are represented by creating a new associative entity between the two related entities. For example, Student and Course could have a many-to-many relationship through an associative entity like Enrollment.
18. What is the difference between an ER diagram and a relational schema?
    - Answer: An ER diagram is a high-level, conceptual representation of the database structure, focusing on entities, attributes, and relationships. A relational schema is a logical representation, defining tables, columns, and relationships in a format ready for database implementation.
19. What is a recursive relationship, and how is it represented?
    - Answer: A recursive relationship is when an entity has a relationship with itself. For example, an Employee entity might have a Supervises relationship with other employees. In an ER diagram, this is represented by drawing a relationship back to the same entity.
20. What is the significance of entity integrity and referential integrity in ER diagrams?
    - Answer:
    •	Entity Integrity: Ensures that each entity has a unique identifier (primary key) and that no primary key values are null.
    •	Referential Integrity: Ensures that foreign key values match primary key values in a related table, maintaining consistent and accurate relationships between entities.
21. What is the purpose of using a weak entity in an ER Diagram?
    - Answer: Weak entities are used to represent entities that do not have their own primary key and depend on a related strong entity for identification. They’re useful for representing entities that exist only in the context of another entity, such as OrderItem dependent on Order.
22. Can you give an example of a one-to-one relationship in an ER diagram?
    - Answer: An example of a one-to-one relationship is Person and Passport. Each Person can have only one Passport, and each Passport belongs to only one Person.
23. What is a ternary relationship, and how is it represented in an ER Diagram?
    - Answer: A ternary relationship involves three entities in a single relationship. For example, a Supplier, Product, and Warehouse relationship, where each supplier supplies specific products to particular warehouses. It is represented by connecting the three entities to a single relationship diamond.
24. What is a supertype/subtype relationship, and how is it represented?
    - Answer: A supertype/subtype relationship represents inheritance or specialization, where a supertype entity has subtypes that inherit its attributes. For example, Vehicle as a supertype and Car and Motorcycle as subtypes. This is often represented with a triangle symbol.